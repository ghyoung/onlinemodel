import React, { useState, useEffect } from 'react'
import {
  Card,
  Table,
  Button,
  Space,
  Modal,
  Form,
  Input,
  Select,
  Switch,
  Tag,
  message,
  Popconfirm,
  Tooltip,
  InputNumber,
  Divider,
  Row,
  Col,
  Statistic
} from 'antd'
import {
  PlusOutlined,
  EditOutlined,
  DeleteOutlined,
  EyeOutlined,
  ReloadOutlined,
  DatabaseOutlined,
  CheckCircleOutlined,
  CloseCircleOutlined,
  ExclamationCircleOutlined,
  SyncOutlined
} from '@ant-design/icons'
import axios from 'axios'
import { getApiUrl } from '@/config/env'

const { Option } = Select
const { TextArea } = Input

// Êï∞ÊçÆÊ∫êÁ±ªÂûã
const DATA_SOURCE_TYPES = [
  { value: 'MYSQL', label: 'MySQL', icon: 'üê¨' },
  { value: 'POSTGRESQL', label: 'PostgreSQL', icon: 'üêò' },
  { value: 'HIVE', label: 'Hive', icon: 'üêù' },
  { value: 'CLICKHOUSE', label: 'ClickHouse', icon: 'ü¶ò' },
  { value: 'ORACLE', label: 'Oracle', icon: 'üóø' },
  { value: 'SQLSERVER', label: 'SQL Server', icon: 'ü™ü' },
  { value: 'DB2', label: 'DB2', icon: 'üîµ' },
  { value: 'SNOWFLAKE', label: 'Snowflake', icon: '‚ùÑÔ∏è' }
]

// Êï∞ÊçÆÊ∫êÁä∂ÊÄÅ
const DATA_SOURCE_STATUS = {
  ACTIVE: { text: 'Ê¥ªË∑É', color: 'green' },
  INACTIVE: { text: 'Êú™ÊøÄÊ¥ª', color: 'default' },
  CONNECTING: { text: 'ËøûÊé•‰∏≠', color: 'processing' },
  CONNECTED: { text: 'Â∑≤ËøûÊé•', color: 'success' },
  ERROR: { text: 'ËøûÊé•ÈîôËØØ', color: 'error' },
  TESTING: { text: 'ÊµãËØï‰∏≠', color: 'processing' }
}

interface DataSource {
  id: number
  name: string
  description?: string
  type: string
  host: string
  port: number
  database: string
  username: string
  status: string
  isEnabled: boolean
  lastTestAt: string
  lastSyncAt: string
  createdAt: string
  createdBy?: {
    username: string
    realName?: string
  }
}

interface DataSourceFormData {
  name: string
  description: string
  type: string
  host: string
  port: number
  database: string
  username: string
  password: string
  connectionParams: string
}

const DataSourceManagement: React.FC = () => {
  const [dataSources, setDataSources] = useState<DataSource[]>([])
  const [loading, setLoading] = useState(false)
  const [modalVisible, setModalVisible] = useState(false)
  const [editingDataSource, setEditingDataSource] = useState<DataSource | null>(null)
  const [form] = Form.useForm()
  const [stats, setStats] = useState<any>({})

  // Ëé∑ÂèñÊï∞ÊçÆÊ∫êÂàóË°®
  const fetchDataSources = async () => {
    setLoading(true)
    try {
      const response = await axios.get(getApiUrl('/data-sources'))
      if (response.data.success) {
        setDataSources(response.data.data)
      }
    } catch (error) {
      message.error('Ëé∑ÂèñÊï∞ÊçÆÊ∫êÂàóË°®Â§±Ë¥•')
      console.error('Ëé∑ÂèñÊï∞ÊçÆÊ∫êÂàóË°®Â§±Ë¥•:', error)
    } finally {
      setLoading(false)
    }
  }

  // Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØ
  const fetchStats = async () => {
    try {
      const response = await axios.get(getApiUrl('/data-sources/stats'))
      if (response.data.success) {
        setStats(response.data.data)
      }
    } catch (error) {
      console.error('Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØÂ§±Ë¥•:', error)
    }
  }

  useEffect(() => {
    fetchDataSources()
    fetchStats()
  }, [])

  // ÊòæÁ§∫ÂàõÂª∫/ÁºñËæëÊ®°ÊÄÅÊ°Ü
  const showModal = (dataSource?: DataSource) => {
    if (dataSource) {
      setEditingDataSource(dataSource)
      form.setFieldsValue({
        name: dataSource.name,
        description: dataSource.description,
        type: dataSource.type,
        host: dataSource.host,
        port: dataSource.port,
        database: dataSource.database,
        username: dataSource.username,
        password: '', // ÁºñËæëÊó∂‰∏çÊòæÁ§∫ÂØÜÁ†Å
        connectionParams: ''
      })
    } else {
      setEditingDataSource(null)
      form.resetFields()
    }
    setModalVisible(true)
  }

  // ÈöêËóèÊ®°ÊÄÅÊ°Ü
  const hideModal = () => {
    setModalVisible(false)
    setEditingDataSource(null)
    form.resetFields()
  }

  // Êèê‰∫§Ë°®Âçï
  const handleSubmit = async (values: DataSourceFormData) => {
    try {
      if (editingDataSource) {
        // Êõ¥Êñ∞Êï∞ÊçÆÊ∫ê
        await axios.put(getApiUrl(`/data-sources/${editingDataSource.id}`), values)
        message.success('Êï∞ÊçÆÊ∫êÊõ¥Êñ∞ÊàêÂäü')
      } else {
        // ÂàõÂª∫Êï∞ÊçÆÊ∫ê
        await axios.post(getApiUrl('/data-sources'), {
          ...values,
          createdBy: 1 // TODO: ‰ªéËÆ§ËØÅÁä∂ÊÄÅËé∑ÂèñÁî®Êà∑ID
        })
        message.success('Êï∞ÊçÆÊ∫êÂàõÂª∫ÊàêÂäü')
      }
      hideModal()
      fetchDataSources()
      fetchStats()
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'Êìç‰ΩúÂ§±Ë¥•'
      message.error(errorMessage)
    }
  }

  // Âà†Èô§Êï∞ÊçÆÊ∫ê
  const handleDelete = async (id: number) => {
    try {
      await axios.delete(getApiUrl(`/data-sources/${id}`))
      message.success('Êï∞ÊçÆÊ∫êÂà†Èô§ÊàêÂäü')
      fetchDataSources()
      fetchStats()
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'Âà†Èô§Â§±Ë¥•'
      message.error(errorMessage)
    }
  }

  // ÊµãËØïËøûÊé•
  const handleTestConnection = async (id: number) => {
    try {
      await axios.post(getApiUrl(`/data-sources/${id}/test`))
      message.success('ËøûÊé•ÊµãËØïÊàêÂäü')
      fetchDataSources()
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'ËøûÊé•ÊµãËØïÂ§±Ë¥•'
      message.error(errorMessage)
    }
  }

  // ÂàáÊç¢ÂêØÁî®Áä∂ÊÄÅ
  const handleToggleStatus = async (id: number, enabled: boolean) => {
    try {
      await axios.put(`http://localhost:8080/api/data-sources/${id}/toggle?enabled=${enabled}`)
      message.success(`Êï∞ÊçÆÊ∫êÂ∑≤${enabled ? 'ÂêØÁî®' : 'Á¶ÅÁî®'}`)
      fetchDataSources()
    } catch (error: any) {
      const errorMessage = error.response?.data?.message || 'Êìç‰ΩúÂ§±Ë¥•'
      message.error(errorMessage)
    }
  }

  // Ë°®Ê†ºÂàóÂÆö‰πâ
  const columns = [
    {
      title: 'ÂêçÁß∞',
      dataIndex: 'name',
      key: 'name',
      render: (text: string, record: DataSource) => (
        <Space>
          <DatabaseOutlined />
          <span>{text}</span>
          {record.isEnabled ? (
            <Tag color="green">ÂêØÁî®</Tag>
          ) : (
            <Tag color="red">Á¶ÅÁî®</Tag>
          )}
        </Space>
      )
    },
    {
      title: 'Á±ªÂûã',
      dataIndex: 'type',
      key: 'type',
      render: (type: string) => {
        const typeInfo = DATA_SOURCE_TYPES.find(t => t.value === type)
        return (
          <Tag color="blue">
            {typeInfo?.icon} {typeInfo?.label || type}
          </Tag>
        )
      }
    },
    {
      title: 'ËøûÊé•‰ø°ÊÅØ',
      key: 'connection',
      render: (record: DataSource) => (
        <div>
          <div>{record.host}:{record.port}</div>
          <div style={{ fontSize: '12px', color: '#666' }}>
            {record.database} / {record.username}
          </div>
        </div>
      )
    },
    {
      title: 'Áä∂ÊÄÅ',
      dataIndex: 'status',
      key: 'status',
      render: (status: string) => {
        const statusInfo = DATA_SOURCE_STATUS[status as keyof typeof DATA_SOURCE_STATUS]
        return (
          <Tag color={statusInfo?.color}>
            {statusInfo?.text || status}
          </Tag>
        )
      }
    },
    {
      title: 'ÊúÄÂêéÊµãËØï',
      dataIndex: 'lastTestAt',
      key: 'lastTestAt',
      render: (date: string) => (
        <span>{new Date(date).toLocaleString()}</span>
      )
    },
    {
      title: 'ÂàõÂª∫ËÄÖ',
      dataIndex: 'createdBy',
      key: 'createdBy',
      render: (creator: any) => (
        <span>{creator?.realName || creator?.username || '-'}</span>
      )
    },
    {
      title: 'Êìç‰Ωú',
      key: 'actions',
      render: (record: DataSource) => (
        <Space size="small">
          <Tooltip title="Êü•ÁúãËØ¶ÊÉÖ">
            <Button
              type="text"
              icon={<EyeOutlined />}
              size="small"
              onClick={() => showModal(record)}
            />
          </Tooltip>
          <Tooltip title="ÁºñËæë">
            <Button
              type="text"
              icon={<EditOutlined />}
              size="small"
              onClick={() => showModal(record)}
            />
          </Tooltip>
          <Tooltip title="ÊµãËØïËøûÊé•">
            <Button
              type="text"
              icon={<SyncOutlined />}
              size="small"
              onClick={() => handleTestConnection(record.id)}
            />
          </Tooltip>
          <Tooltip title={record.isEnabled ? 'Á¶ÅÁî®' : 'ÂêØÁî®'}>
            <Switch
              size="small"
              checked={record.isEnabled}
              onChange={(checked) => handleToggleStatus(record.id, checked)}
            />
          </Tooltip>
          <Popconfirm
            title="Á°ÆÂÆöË¶ÅÂà†Èô§Ëøô‰∏™Êï∞ÊçÆÊ∫êÂêóÔºü"
            onConfirm={() => handleDelete(record.id)}
            okText="Á°ÆÂÆö"
            cancelText="ÂèñÊ∂à"
          >
            <Tooltip title="Âà†Èô§">
              <Button
                type="text"
                danger
                icon={<DeleteOutlined />}
                size="small"
              />
            </Tooltip>
          </Popconfirm>
        </Space>
      )
    }
  ]

  return (
    <div style={{ padding: '24px' }}>
      {/* ÁªüËÆ°‰ø°ÊÅØ */}
      <Row gutter={16} style={{ marginBottom: '24px' }}>
        <Col span={6}>
          <Card>
            <Statistic
              title="ÊÄªÊï∞ÊçÆÊ∫ê"
              value={dataSources.length}
              prefix={<DatabaseOutlined />}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="Â∑≤ËøûÊé•"
              value={dataSources.filter(ds => ds.status === 'CONNECTED').length}
              prefix={<CheckCircleOutlined />}
              valueStyle={{ color: '#3f8600' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="ËøûÊé•ÈîôËØØ"
              value={dataSources.filter(ds => ds.status === 'ERROR').length}
              prefix={<CloseCircleOutlined />}
              valueStyle={{ color: '#cf1322' }}
            />
          </Card>
        </Col>
        <Col span={6}>
          <Card>
            <Statistic
              title="ÂêØÁî®‰∏≠"
              value={dataSources.filter(ds => ds.isEnabled).length}
              prefix={<ExclamationCircleOutlined />}
              valueStyle={{ color: '#1890ff' }}
            />
          </Card>
        </Col>
      </Row>

      {/* Êï∞ÊçÆÊ∫êÂàóË°® */}
      <Card
        title="Êï∞ÊçÆÊ∫êÁÆ°ÁêÜ"
        extra={
          <Space>
            <Button
              icon={<ReloadOutlined />}
              onClick={() => {
                fetchDataSources()
                fetchStats()
              }}
            >
              Âà∑Êñ∞
            </Button>
            <Button
              type="primary"
              icon={<PlusOutlined />}
              onClick={() => showModal()}
            >
              Êñ∞Âª∫Êï∞ÊçÆÊ∫ê
            </Button>
          </Space>
        }
      >
        <Table
          columns={columns}
          dataSource={dataSources}
          rowKey="id"
          loading={loading}
          pagination={{
            showSizeChanger: true,
            showQuickJumper: true,
            showTotal: (total) => `ÂÖ± ${total} Êù°ËÆ∞ÂΩï`
          }}
        />
      </Card>

      {/* ÂàõÂª∫/ÁºñËæëÊ®°ÊÄÅÊ°Ü */}
      <Modal
        title={editingDataSource ? 'ÁºñËæëÊï∞ÊçÆÊ∫ê' : 'Êñ∞Âª∫Êï∞ÊçÆÊ∫ê'}
        open={modalVisible}
        onCancel={hideModal}
        footer={null}
        width={600}
      >
        <Form
          form={form}
          layout="vertical"
          onFinish={handleSubmit}
          initialValues={{
            port: 3306,
            connectionParams: ''
          }}
        >
          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="name"
                label="Êï∞ÊçÆÊ∫êÂêçÁß∞"
                rules={[
                  { required: true, message: 'ËØ∑ËæìÂÖ•Êï∞ÊçÆÊ∫êÂêçÁß∞' },
                  { max: 100, message: 'ÂêçÁß∞‰∏çËÉΩË∂ÖËøá100‰∏™Â≠óÁ¨¶' }
                ]}
              >
                <Input placeholder="ËØ∑ËæìÂÖ•Êï∞ÊçÆÊ∫êÂêçÁß∞" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="type"
                label="Êï∞ÊçÆÊ∫êÁ±ªÂûã"
                rules={[{ required: true, message: 'ËØ∑ÈÄâÊã©Êï∞ÊçÆÊ∫êÁ±ªÂûã' }]}
              >
                <Select placeholder="ËØ∑ÈÄâÊã©Êï∞ÊçÆÊ∫êÁ±ªÂûã">
                  {DATA_SOURCE_TYPES.map(type => (
                    <Option key={type.value} value={type.value}>
                      {type.icon} {type.label}
                    </Option>
                  ))}
                </Select>
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="description"
            label="ÊèèËø∞"
            rules={[{ max: 500, message: 'ÊèèËø∞‰∏çËÉΩË∂ÖËøá500‰∏™Â≠óÁ¨¶' }]}
          >
            <TextArea rows={2} placeholder="ËØ∑ËæìÂÖ•Êï∞ÊçÆÊ∫êÊèèËø∞" />
          </Form.Item>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="host"
                label="‰∏ªÊú∫Âú∞ÂùÄ"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•‰∏ªÊú∫Âú∞ÂùÄ' }]}
              >
                <Input placeholder="localhost" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="port"
                label="Á´ØÂè£"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Á´ØÂè£Âè∑' }]}
              >
                <InputNumber
                  style={{ width: '100%' }}
                  placeholder="3306"
                  min={1}
                  max={65535}
                />
              </Form.Item>
            </Col>
          </Row>

          <Row gutter={16}>
            <Col span={12}>
              <Form.Item
                name="database"
                label="Êï∞ÊçÆÂ∫ìÂêç"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Êï∞ÊçÆÂ∫ìÂêç' }]}
              >
                <Input placeholder="ËØ∑ËæìÂÖ•Êï∞ÊçÆÂ∫ìÂêç" />
              </Form.Item>
            </Col>
            <Col span={12}>
              <Form.Item
                name="username"
                label="Áî®Êà∑Âêç"
                rules={[{ required: true, message: 'ËØ∑ËæìÂÖ•Áî®Êà∑Âêç' }]}
              >
                <Input placeholder="ËØ∑ËæìÂÖ•Áî®Êà∑Âêç" />
              </Form.Item>
            </Col>
          </Row>

          <Form.Item
            name="password"
            label="ÂØÜÁ†Å"
            rules={[
              { required: !editingDataSource, message: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å' },
              { min: 1, message: 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å' }
            ]}
          >
            <Input.Password placeholder={editingDataSource ? '‰∏ç‰øÆÊîπËØ∑ÁïôÁ©∫' : 'ËØ∑ËæìÂÖ•ÂØÜÁ†Å'} />
          </Form.Item>

          <Form.Item
            name="connectionParams"
            label="ËøûÊé•ÂèÇÊï∞"
            rules={[{ max: 1000, message: 'ËøûÊé•ÂèÇÊï∞‰∏çËÉΩË∂ÖËøá1000‰∏™Â≠óÁ¨¶' }]}
          >
            <TextArea
              rows={3}
              placeholder="ÂèØÈÄâÔºåÂ¶ÇÔºöuseSSL=false&serverTimezone=UTC"
            />
          </Form.Item>

          <Divider />

          <Form.Item style={{ marginBottom: 0, textAlign: 'right' }}>
            <Space>
              <Button onClick={hideModal}>ÂèñÊ∂à</Button>
              <Button type="primary" htmlType="submit">
                {editingDataSource ? 'Êõ¥Êñ∞' : 'ÂàõÂª∫'}
              </Button>
            </Space>
          </Form.Item>
        </Form>
      </Modal>
    </div>
  )
}

export default DataSourceManagement

