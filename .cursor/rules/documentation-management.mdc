# 文档管理规则

## 文档分类原则
- **按功能模块分类**：每个功能模块有独立的文档
- **按开发阶段分类**：需求、设计、开发、测试、部署各阶段
- **按用户角色分类**：开发者、用户、运维人员等不同角色

## 文档组织结构
```
doc/
├── 1、prd/          # 产品需求文档
├── 2、dev/          # 开发技术文档
├── 3、prototype/    # 原型和设计文档
└── 4、maintenance/  # 运维和维护文档
```

## 文档编写规范

### 通用要求
- 使用中文编写，专业术语要准确
- 结构要清晰，层次要分明
- 内容要完整，避免遗漏重要信息
- 格式要统一，便于阅读和维护

### 技术文档要求
- 代码示例要完整，可直接运行
- 配置说明要详细，包含所有参数
- 错误处理要全面，包含常见问题
- 版本信息要明确，便于追踪变更

### API文档要求
- 接口说明要清晰，包含请求和响应
- 参数说明要详细，包含类型和约束
- 示例要完整，包含成功和失败情况
- 错误码要明确，便于问题定位

## 文档更新原则
- **同步更新**：代码变更时同步更新相关文档
- **版本控制**：文档变更要有版本记录
- **变更通知**：重要变更要及时通知相关人员
- **定期审查**：定期审查文档的准确性和完整性

## 文档质量要求
- 内容要准确，与实际系统一致
- 语言要简洁，避免冗余和歧义
- 示例要实用，便于理解和操作
- 维护要及时，反映最新状态

## 文档使用规范
- 开发前要阅读相关文档
- 开发中要参考文档规范
- 开发后要更新文档内容
- 问题解决后要记录到文档

## 避免的问题
- 不要创建过多零散的文档
- 不要重复记录相同信息
- 不要创建无法维护的文档
- 不要忽略文档的实用性
description:
globs:
alwaysApply: true
---
