## 文档管理规范

### 文档存放路径规范
- **所有项目文档必须保存在项目根目录的 `doc/` 路径下**
- **禁止在代码目录中创建文档文件**
- **禁止在项目根目录直接放置文档文件**

### 文档目录结构
```
doc/
├── 1、prd/                    # 产品需求文档
│   ├── 湖仓建模工具PRD.md
│   └── 功能模块PRD/
├── 2、dev/                    # 开发文档
│   ├── 技术可行性分析.md
│   ├── 湖仓建模工具开发计划.md
│   ├── API接口文档/
│   ├── 数据库设计文档/
│   └── 部署文档/
├── 3、prototype/              # 原型和设计文档
│   ├── 设计规范.md
│   ├── 页面结构设计.md
│   └── assets/
└── 4、maintenance/            # 维护文档
    ├── 用户手册.md
    ├── 运维手册.md
    └── 故障排除.md
```

### 文档分类规范
- **PRD文档**：产品需求、功能规格、用户故事
- **技术文档**：架构设计、API文档、数据库设计、部署说明
- **设计文档**：UI设计、交互设计、原型设计
- **维护文档**：用户手册、运维手册、故障排除

### 文档命名规范
- 使用中文命名，便于团队理解
- 文件名格式：`{模块名}{文档类型}.md`
- 目录名格式：`{序号}、{分类名}/`
- 示例：`数据源管理API文档.md`、`用户管理数据库设计.md`

### 文档内容规范
- 使用 Markdown 格式编写
- 包含文档版本和更新日期
- 提供目录导航
- 使用表格、代码块、图表等增强可读性
- 包含相关文档的链接引用

### 代码注释与文档同步
- **代码修改后必须同步更新相关文档**
- **API接口变更必须更新API文档**
- **数据库结构变更必须更新数据库设计文档**
- **功能变更必须更新用户手册**

### 文档更新流程
1. **代码变更**：修改代码实现
2. **文档识别**：识别需要更新的相关文档
3. **文档更新**：更新对应的文档内容
4. **版本记录**：记录文档更新版本和日期
5. **团队通知**：通知团队文档已更新

### 禁止行为
- ❌ 在 `code/` 目录中创建文档文件
- ❌ 在项目根目录直接放置文档
- ❌ 代码变更后不更新相关文档
- ❌ 文档内容与实际代码不一致
- ❌ 文档结构混乱，难以查找

### 推荐做法
- ✅ 所有文档统一放在 `doc/` 目录下
- ✅ 使用清晰的目录结构分类文档
- ✅ 文档命名规范，便于查找
- ✅ 代码变更后立即更新相关文档
- ✅ 定期检查文档与代码的一致性

### 文档模板示例
```markdown
# 文档标题

**版本**: v1.0.0  
**更新日期**: 2024-01-01  
**作者**: 开发团队  

## 目录
- [概述](#概述)
- [详细说明](#详细说明)
- [相关文档](#相关文档)

## 概述
文档概述内容...

## 详细说明
详细内容...

## 相关文档
- [相关文档1](./相关文档1.md)
- [相关文档2](./相关文档2.md)
```

### 文档同步检查清单
- [ ] 代码变更后识别了相关文档
- [ ] 更新了所有相关文档
- [ ] 文档内容与代码实现一致
- [ ] 文档版本和日期已更新
- [ ] 团队已通知文档更新
description:
globs:
alwaysApply: true
---
