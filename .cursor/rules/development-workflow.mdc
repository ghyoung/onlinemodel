# 开发流程规则

## 核心原则
- **先分析，后开发**：任何功能开发前必须先分析需求和现有代码
- **渐进式开发**：分步骤实现，每步都要验证
- **文档驱动**：开发过程中同步更新相关文档
- **测试验证**：每个功能完成后都要有测试验证

## 开发流程

### 1. 需求分析阶段
- 仔细阅读用户需求，理解核心问题
- 分析现有代码结构，找到相关模块
- 确定需要修改的文件和新增的文件
- 制定开发计划，明确实现步骤

### 2. 数据库设计阶段
- **先设计数据库表结构**：明确字段名、类型、约束、索引
- **创建字段映射文档**：记录数据库字段与业务字段的对应关系
- **前后端字段同步**：确保API接口和前端组件使用相同的字段名
- **类型映射验证**：验证数据库类型与前后端类型的正确映射

### 3. 代码开发阶段
- **数据库开发**：
  - 严格按照设计文档创建表结构
  - 字段名使用下划线命名法，避免驼峰命名
  - 创建完整的字段注释和约束说明
  - 建立字段映射关系表，便于前后端参考

- **数据连接开发**：
  - **严禁使用模拟数据**：所有数据源连接、表结构同步等功能必须使用真实数据库连接
  - **真实连接验证**：数据源创建时必须真实验证连接参数，不能使用随机数或固定返回值
  - **真实元数据获取**：表结构同步必须从真实数据库读取元数据，不能使用预设的示例数据
  - **连接失败处理**：连接失败时给出相应的问题分析，并尝试解决
  - **多数据库支持**：实现主流数据库类型（MySQL、PostgreSQL、MongoDB等）的真实连接和元数据获取
  - **连接安全**：实现连接超时、资源释放、异常处理等安全机制

- **后端开发**：
  - 先检查现有API接口
  - 新增接口要遵循RESTful规范
  - 参数验证要完整，使用合适的中间件
  - 错误处理要统一，返回格式一致
  - 数据库操作要考虑事务和性能
  - **字段映射要准确**：API响应字段要与数据库字段完全一致

- **前端开发**：
  - 组件设计要遵循现有模式
  - 状态管理要统一
  - API调用要处理错误情况
  - UI要符合设计规范

### 3. 测试验证阶段
- 创建测试脚本验证功能
- 测试正常流程和异常情况
- 验证前后端交互
- 检查数据一致性

### 4. 文档更新阶段
- 更新相关技术文档
- 记录问题和解决方案
- 更新API文档
- 添加使用说明

## 代码质量要求

### 后端代码
- 使用ES6+语法
- 错误处理要完整
- 日志记录要清晰
- 参数验证要严格
- 数据库查询要优化

### 数据库字段一致性
- **字段映射必须一致**：数据库表字段、后端API字段、前端组件字段必须完全一致
- **命名规范统一**：使用统一的命名规范（下划线命名法）
- **类型映射准确**：数据库类型、后端类型、前端TypeScript类型要准确映射
- **字段验证同步**：前后端的字段验证规则要与数据库约束保持一致

### 前端代码
- 使用TypeScript
- 组件要可复用
- 状态管理要清晰
- 错误边界要完善
- 响应式设计要合理

## 文件组织规范
- 新增功能要放在合适的目录
- 文件名要清晰表达用途
- 相关文件要放在一起
- 避免创建过多零散文件

## 提交规范
- 每次提交要有明确的目的
- 提交信息要清晰描述变更
- 相关文件要一起提交
- 避免提交调试代码
description:
globs:
alwaysApply: true
---
