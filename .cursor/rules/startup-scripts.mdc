## 启动脚本管理规范

### 启动脚本统一管理
- **禁止重复创建启动脚本**：已有启动脚本时，优先修改现有脚本
- **启动脚本命名规范**：使用统一的命名前缀
  - Windows: `start-{环境}.bat`
  - Linux/Mac: `start-{环境}.sh`
  - 通用: `start-{环境}.js`

### 现有启动脚本说明
- `start-dev.bat` - 开发环境启动脚本
- `start.bat` - 生产环境启动脚本
- `start-dev.sh` - Linux/Mac 开发环境启动脚本

### 启动脚本修改原则
1. **优先修改现有脚本**：不要创建新的启动脚本
2. **功能分离**：在现有脚本中添加条件判断，而不是创建新脚本
3. **参数化配置**：使用环境变量和命令行参数控制不同环境
4. **脚本复用**：多个环境可以调用同一个核心脚本

### 启动脚本结构规范
```bash
# 开发环境启动
start-dev.bat/sh - 启动前后端开发服务器
start.bat/sh - 启动生产环境

# 功能脚本（非启动脚本）
fix-database.js - 数据库修复脚本
check-config.js - 配置检查脚本
test-api.js - API测试脚本
```

### 禁止行为
- ❌ 创建 `start-new.bat`, `start-fix.bat` 等新启动脚本
- ❌ 为每个问题创建专门的启动脚本
- ❌ 启动脚本功能重复

### 推荐做法
- ✅ 修改现有启动脚本，添加功能开关
- ✅ 使用命令行参数控制不同功能
- ✅ 创建功能脚本（非启动脚本）
- ✅ 在启动脚本中调用功能脚本

### 示例：修改现有启动脚本
```bash
# 在 start-dev.bat 中添加功能开关
if "%1"=="fix-db" (
    node fix-database.js
) else if "%1"=="check" (
    node check-config.js
) else (
    # 正常启动开发环境
    start backend && start frontend
)
```
description:
globs:
alwaysApply: true
---
