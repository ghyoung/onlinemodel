# 技术架构规则

## 架构设计原则
- **模块化设计**：功能模块要职责清晰，耦合度低
- **一致性原则**：相似功能使用相同的设计模式
- **可扩展性**：架构要支持功能扩展和系统演进
- **可维护性**：代码结构要清晰，便于理解和修改

## 后端架构规范

### 目录结构
```
src/
├── routes/          # API路由
├── middleware/      # 中间件
├── database/        # 数据库相关
├── utils/           # 工具函数
└── config/          # 配置文件
```

### 代码组织
- 路由文件按功能模块划分
- 中间件要可复用，职责单一
- 数据库操作要封装，避免重复代码
- 工具函数要通用，便于复用

### API设计规范
- 遵循RESTful设计原则
- 统一的响应格式和错误处理
- 完整的参数验证和类型检查
- 清晰的API文档和示例

## 前端架构规范

### 目录结构
```
src/
├── components/      # 可复用组件
├── pages/          # 页面组件
├── stores/         # 状态管理
├── config/         # 配置文件
├── types/          # 类型定义
└── styles/         # 样式文件
```

### 组件设计
- 组件要职责单一，功能明确
- 使用TypeScript定义接口和类型
- 状态管理要集中，避免状态分散
- 样式要模块化，避免样式冲突

### 状态管理
- 使用统一的状态管理方案
- 状态更新要可预测，避免副作用
- 异步操作要处理加载和错误状态
- 状态持久化要考虑性能影响

## 数据库设计规范
- 表结构要规范化，避免冗余
- 索引设计要合理，支持查询优化
- 外键关系要明确，保证数据一致性
- 数据迁移要考虑向后兼容

## 性能优化原则
- 数据库查询要优化，避免N+1问题
- 前端要懒加载，减少初始加载时间
- 缓存策略要合理，提高响应速度
- 错误处理要优雅，不影响用户体验

## 安全规范
- 用户认证要严格，使用JWT等安全方案
- 参数验证要完整，防止注入攻击
- 权限控制要细粒度，避免越权访问
- 敏感信息要加密，不在日志中暴露
description:
globs:
alwaysApply: true
---
