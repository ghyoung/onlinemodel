## 后端Node.js开发规范

### 项目结构
- 使用 ES6 模块语法 (`import/export`)
- 遵循 MVC 架构模式
- 路由放在 `src/routes/` 目录
- 控制器放在 `src/controllers/` 目录
- 模型放在 `src/models/` 目录
- 中间件放在 `src/middleware/` 目录
- 服务层放在 `src/services/` 目录

### 代码规范
- 使用 ES6+ 语法特性
- 函数名使用 camelCase
- 常量使用 UPPER_SNAKE_CASE
- 类名使用 PascalCase
- 使用 `const` 和 `let`，避免 `var`
- 使用箭头函数和模板字符串

### API设计规范
- RESTful API 设计原则
- 使用 HTTP 状态码正确表示响应状态
- 统一的响应格式：`{ success, data, message }`
- 请求参数验证使用 Joi
- 错误处理使用 try-catch 和错误中间件

### 数据库操作
- 使用 PostgreSQL 数据库
- 数据库连接使用连接池
- SQL 查询使用参数化查询防止注入
- 事务处理确保数据一致性
- 数据库操作放在 service 层

### 安全规范
- 使用 Helmet 设置安全头
- 密码使用 bcryptjs 加密
- JWT 令牌管理
- CORS 配置
- 输入验证和清理

### 错误处理
- 全局错误处理中间件
- 自定义错误类
- 日志记录使用 Morgan
- 生产环境不暴露敏感错误信息

### 性能优化
- 使用连接池管理数据库连接
- 异步操作使用 async/await
- 合理使用缓存策略
- 静态文件服务优化

### 测试规范
- API 测试使用 test-api.js
- 单元测试覆盖核心业务逻辑
- 集成测试验证数据库操作
- 测试文件命名：`*.test.js`
description:
globs:
alwaysApply: true
---
