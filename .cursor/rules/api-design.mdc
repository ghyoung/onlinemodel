## API设计和接口规范

### API 架构原则
- RESTful API 设计
- 前后端分离架构
- 统一的响应格式
- 版本化管理
- 文档化接口

### 接口命名规范
- 使用复数名词表示资源集合
- 使用 HTTP 动词表示操作
- URL 使用 kebab-case 命名
- 版本号放在 URL 中：`/api/v1/`

### HTTP 方法使用
- GET：查询资源
- POST：创建资源
- PUT：更新整个资源
- PATCH：部分更新资源
- DELETE：删除资源

### 响应格式规范
```json
{
  "success": true,
  "data": {},
  "message": "操作成功",
  "timestamp": "2024-01-01T00:00:00Z",
  "code": 200
}
```

### 错误处理规范
- HTTP 状态码正确使用
- 错误信息用户友好
- 错误代码标准化
- 详细错误日志记录

### 请求参数验证
- 使用 Joi 进行参数验证
- 必填字段检查
- 数据类型验证
- 参数范围限制
- 自定义验证规则

### 分页和排序
- 分页参数：`page`, `size`
- 排序参数：`sort`, `order`
- 默认分页大小：20
- 最大分页大小：100

### 搜索和过滤
- 搜索参数：`q` (关键词)
- 过滤参数：`filter[字段名]=值`
- 日期范围：`start_date`, `end_date`
- 状态过滤：`status`

### 认证和授权
- JWT Token 认证
- 角色权限控制
- API 访问频率限制
- 敏感接口二次验证

### 性能优化
- 响应数据压缩
- 缓存策略
- 异步处理
- 批量操作接口

### 文档规范
- 使用 OpenAPI/Swagger 规范
- 接口描述详细
- 请求响应示例
- 错误码说明
- 更新日志记录
description:
globs:
alwaysApply: true
---
