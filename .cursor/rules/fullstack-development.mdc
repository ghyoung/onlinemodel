## 全栈开发流程规范

### 开发流程标准化
- **前后端同步开发**：禁止前后端独立开发，必须同步进行
- **接口先行原则**：先定义API接口，再实现前后端代码
- **数据模型统一**：前后端使用相同的数据模型定义

### 开发前准备阶段
1. **需求分析**：明确功能需求和业务逻辑
2. **API接口设计**：定义RESTful API接口规范
3. **数据模型设计**：设计数据库表结构和字段
4. **前端组件设计**：设计UI组件和页面结构
5. **开发计划制定**：前后端同步开发计划

### API接口设计规范
- 使用 OpenAPI/Swagger 规范文档
- 接口路径：`/api/v1/{资源名}`
- 请求/响应格式统一
- 错误码和错误信息标准化
- 分页、排序、过滤参数统一

### 数据模型同步规范
```typescript
// 前端 TypeScript 接口
interface User {
  id: number;
  username: string;
  email: string;
  status: 'active' | 'inactive';
  createdAt: string;
  updatedAt: string;
}

// 后端数据库表结构
CREATE TABLE users (
  id BIGSERIAL PRIMARY KEY,
  username VARCHAR(50) NOT NULL UNIQUE,
  email VARCHAR(100) NOT NULL UNIQUE,
  status VARCHAR(20) DEFAULT 'active',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);
```

### 开发同步检查点
1. **接口定义完成**：前后端确认API接口
2. **数据模型确认**：数据库表结构与前端接口一致
3. **基础功能实现**：CRUD操作前后端同步
4. **业务逻辑实现**：复杂业务逻辑前后端验证
5. **测试验证**：前后端联调测试

### 禁止行为
- ❌ 前端独立开发，不等待后端接口
- ❌ 后端独立开发，不提供接口文档
- ❌ 数据模型前后端不一致
- ❌ 跳过接口设计直接编码

### 推荐做法
- ✅ 先写接口文档，再开始编码
- ✅ 前后端使用相同的数据模型
- ✅ 定期同步开发进度
- ✅ 使用TypeScript确保类型安全
- ✅ 创建开发任务清单

### 开发任务清单模板
```
## 功能模块：{模块名}

### 1. 需求分析
- [ ] 功能需求明确
- [ ] 业务逻辑梳理
- [ ] 用户故事编写

### 2. 数据模型设计
- [ ] 数据库表设计
- [ ] 字段类型定义
- [ ] 关联关系设计

### 3. API接口设计
- [ ] 接口路径定义
- [ ] 请求参数定义
- [ ] 响应格式定义
- [ ] 错误处理定义

### 4. 前端开发
- [ ] 组件设计
- [ ] 页面布局
- [ ] 状态管理
- [ ] 接口调用

### 5. 后端开发
- [ ] 数据库表创建
- [ ] 模型定义
- [ ] 控制器实现
- [ ] 路由配置

### 6. 联调测试
- [ ] 接口测试
- [ ] 功能测试
- [ ] 前后端联调
- [ ] 问题修复
```
description:
globs:
alwaysApply: true
---
